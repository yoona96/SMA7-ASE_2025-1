name: CI-with-static-analysis

on:
  workflow_dispatch:

jobs:
    ##### CHECKOUT AND CLONE #####
  checkout-and-clone:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
    
      - name: Clone Dev repo
        run: |
          git clone https://github.com/brian770/OOPT_development repo-temp
          mv repo-temp/source-code ./source-code

      - name: Upload source-code artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: 📁 Create and initialize report directory
        run: |
          mkdir -p report
          echo "This is a placeholder file." > report/placeholder.txt

      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
          find report

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true


  ##### INSTALL DEPENDENCIES #####
  install-dependencies:
    runs-on: ubuntu-latest
    needs: checkout-and-clone
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libgtest-dev  #dependencies download
      
      - name: Install Google Test
        run: |
          sudo apt-get install -y libgtest-dev
          cd /usr/src/gtest
          sudo cmake .
          sudo make
          sudo cp lib/*.a /usr/lib
          sudo cp -r /usr/src/gtest/include/gtest /usr/include/


  ##### BUILD WITH COVERAGE #####
  build-with-coverage:
    runs-on: ubuntu-latest
    needs:
      - checkout-and-clone
      - install-dependencies
    steps:
      - name: Download source-code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: 🕵️ List current directory contents
        run: ls -R

      - name: ⚙️ Build with GCC and Coverage (Sonar Wrapped)
        run: |
          export CC=gcc
          export CXX=g++
          cmake -S source-code -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_FLAGS="--coverage -O0"
          cmake --build build --clean-first --verbose
          ctest --test-dir build --output-on-failure || true

      - name: Upload build directory
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build


  ##### CPPCHECK #####
  cppcheck:
    runs-on: ubuntu-latest
    needs: 
      - checkout-and-clone
      - install-dependencies
    steps:          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck
          
      - name: Download source-code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report

      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report
      
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --std=c++17 --language=c++ \
                   -I source-code/include source-code/src 2> report/cppcheck-report.txt

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true
          

  ##### FLAWFINDER #####
  flawfinder:
    runs-on: ubuntu-latest
    needs: 
      - checkout-and-clone
      - install-dependencies
      - cppcheck
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y flawfinder
          
      - name: Download source-code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report

      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report
    
      - name: Run flawfinder and save txt
        run: |
          flawfinder --columns source-code/src > report/flawfinder-report.txt
          cat report/flawfinder-report.txt
      
      - name: Generate flawfinder markdown table
        run: |
          echo "| File | Line | Risk | Description |" > report/flawfinder-issues.md
          echo "|------|------|------|-------------|" >> report/flawfinder-issues.md
      
            if grep -qE "^[0-9]+:.*" report/flawfinder-report.txt; then
              awk '
                /^[0-9]+:/ {
                  split($0, arr, ":")
                  file = arr[1]
                  line = arr[2]
                  risk = arr[3]
                  desc = substr($0, index($0, arr[4]))
                  gsub(/\|/, "\\|", desc)
                  printf("| %s | %s | %s | %s |\n", file, line, risk, desc)
                }
              ' report/flawfinder-report.txt >> report/flawfinder-issues.md
            fi

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true
          

  ##### CLANG TIDY #####
  clang-tidy:
    runs-on: ubuntu-latest
    needs: 
      - checkout-and-clone
      - install-dependencies
      - cppcheck
      - flawfinder
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy  #dependencies download
          
      - name: Download source-code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report
          
      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report
          
      - name: Run clang-tidy
        run: |
          clang_tidy_report=report/clang-tidy-report.txt
          echo "" > "$clang_tidy_report"
      
          find source-code -name '*.cpp' | while read file; do
            echo "Checking $file" >> "$clang_tidy_report"
            clang-tidy "$file" -p build -checks=* >> report/clang-tidy-report.txt 2>&1 || true
          done
      
          # 확인용 디버깅
          cat "$clang_tidy_report"

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true


  ##### Coverage Report #####
  coverage-report:
    runs-on: ubuntu-latest
    needs:
      - checkout-and-clone
      - build-with-coverage
      - cppcheck
      - flawfinder
      - clang-tidy
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr  #dependencies download
    
      - name: Download source-code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report
          
      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report

      - name: Download build directory
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build
          
      - name: ✅ Generate Coverage Report (Ignore CMake & errors)
        run: |
          gcovr --sonarqube \
                -r . \
                --object-directory build \
                --exclude build/CMakeFiles \
                --gcov-ignore-errors=all \
                --fail-under-line 0 \
                -o report/coverage.xml

      - name: 📊 Generate Coverage Summary Table
        run: |
          total=0
          covered=0
      
          while read -r line; do
            # covered 속성값이 "true" 또는 "1"인지 확인
            if echo "$line" | grep -q 'covered="\(true\|1\)"'; then
              covered=$((covered + 1))
            fi
            total=$((total + 1))
          done < <(grep "<lineToCover" report/coverage.xml)
      
          mkdir -p report
          echo "| Metric | Value |" > report/coverage-summary.md
          echo "|--------|-------|" >> report/coverage-summary.md
      
          if [ "$total" -gt 0 ]; then
            percent=$(awk "BEGIN { printf \"%.2f\", ($covered/$total)*100 }")
            echo "| Coverage | $percent% ($covered / $total lines) |" >> report/coverage-summary.md
          else
            echo "| Coverage | N/A (No lines to cover) |" >> report/coverage-summary.md
          fi

      - name: 🔍 List Uncovered Lines
        run: |
          echo "| File | Line |" > report/uncovered-lines.md
          echo "|------|------|" >> report/uncovered-lines.md
      
          grep '<lineToCover' report/coverage.xml | grep 'covered="false"' | while read -r line; do
            file=$(echo "$line" | sed -n 's/.*<file path="\([^"]*\)".*/\1/p')
            lineno=$(echo "$line" | sed -n 's/.*lineNumber="\([0-9]*\)".*/\1/p')
      
            # 만약 file이 비어있으면 이전 file 경로 유지
            if [ -n "$file" ]; then current_file="$file"; fi
      
            if [ -n "$lineno" ]; then
              echo "| $current_file | $lineno |" >> report/uncovered-lines.md
            fi
          done
      
      - name: 📈 Verify Coverage Summary Output
        run: |
          if [ -s report/coverage-summary.md ]; then
            echo "✅ Coverage summary is present."
          else
            echo "⚠️ coverage-summary.md is empty!"
            cat report/coverage.xml
          fi

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true


  ##### SONAR CLOUD #####
  sonar-cloud:
    runs-on: ubuntu-latest
    needs:
      - checkout-and-clone
      - install-dependencies
      - build-with-coverage
      - coverage-report
    steps:
      - name: Download source-code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: source-code

      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report
          
      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report

      - name: Download build directory
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: 🚀 Run SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        if: success()
        with:
          args: >
            -Dsonar.projectKey=brian770_OOPT_development
            -Dsonar.organization=brian770
            -Dsonar.sources=source-code/src
            -Dsonar.cfamily.compile-commands=build/compile_commands.json
            -Dsonar.coverageReportPaths=report/coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Fetch SonarCloud issues
        run: |
          curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/issues/search?projectKeys=brian770_OOPT_development&resolved=false&pageSize=500" \
            -o report/sonar-issues.json

      - name: 📈 Verify Sonar Issue Output
        run: |
          if [ -s report/sonar-issues.json ]; then
            echo "✅ Sonar issue is present."
          else
            echo "⚠️ sonar-issues.json is empty!"
            cat report/sonar-issues.json
          fi

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true


  ##### STATIC ANALYSIS REPORTS #####
  static-analysis-reports:
    runs-on: ubuntu-latest
    needs:
      - checkout-and-clone
      - install-dependencies
      - build-with-coverage
      - cppcheck
      - flawfinder
      - clang-tidy
      - sonar-cloud 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3   # ✅ Git 저장소 초기화됨
      
      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report
          
      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report
          
      - name: 📤 Commit updated static-analysis artifacts
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          
          git add report/cppcheck-report.txt \
                  report/clang-tidy-report.txt \
                  report/flawfinder-issues.md \
                  report/flawfinder-report.txt \
                  report/coverage.xml \
                  report/coverage-summary.md \
                  report/sonar-issues.json
      
          if ! git diff --cached --quiet; then
            git commit -m "Update static analysis artifacts"
            git push
            echo "✅ 분석 결과 파일을 저장소에 푸시했습니다."
          else
            echo "ℹ️  변경된 분석 결과 파일이 없어 커밋을 생략합니다."
          fi

      - name: 📝 Merge all static analysis results into issue-body.md
        run: |
          echo "# 📊 Static Analysis Summary Report" > report/issue-body.md

          ## cppcheck 테이블
          echo -e "\n## 🚨 cppcheck Results\n" >> report/issue-body.md
          echo "| File | Line | Severity | Message |" >> report/issue-body.md
          echo "|------|------|----------|---------|" >> report/issue-body.md
      
          awk '
            match($0, /^([^:]+):([0-9]+):[0-9]*:\s+([a-zA-Z]+):\s+(.*)/, arr) {
              file = arr[1]
              line = arr[2]
              severity = arr[3]
              message = arr[4]
              gsub(/\|/, "\\|", message)
              printf("| %s | %s | %s | %s |\n", file, line, severity, message)
            }
          ' report/cppcheck-report.txt >> report/issue-body.md || echo "✅ No cppcheck issues found." >> report/issue-body.md

          ## clang-tidy 테이블
          echo -e "\n## 🧹 clang-tidy Results\n" >> report/issue-body.md
          echo "| File | Description |" >> report/issue-body.md
          echo "|------|-------------|" >> report/issue-body.md
          grep -E "warning:|error:" report/clang-tidy-report.txt | while read line; do
            file=$(echo "$line" | cut -d':' -f1)
            desc=$(echo "$line" | cut -d':' -f4-)
            echo "| $file | $desc |" >> report/issue-body.md
          done || echo "✅ No clang-tidy issues found." >> report/issue-body.md

          ## flawfinder 테이블
          echo -e "\n## 🔐 flawfinder Results\n" >> report/issue-body.md
          cat report/flawfinder-issues.md >> report/issue-body.md || echo "✅ No flawfinder issues." >> report/issue-body.md

          ## coverage 테이블
          echo -e "\n## 📈 Coverage Summary (gcov)\n" >> report/issue-body.md
          cat report/coverage-summary.md >> report/issue-body.md

          ## uncovered coverage 테이블
          echo -e "\n## ❌ Uncovered Lines\n" >> report/issue-body.md
          if [ -s report/uncovered-lines.md ]; then
            cat report/uncovered-lines.md >> report/issue-body.md
          else
            echo "✅ All lines are covered by tests." >> report/issue-body.md
          fi

          ## SonarCloud 이슈 테이블
          echo -e "\n## ☁️ SonarCloud Issues\n" >> report/issue-body.md
          echo "| Type | Severity | File | Line | Description |" >> report/issue-body.md
          echo "|------|----------|------|------|-------------|" >> report/issue-body.md
          jq -r '.issues[] | "| \(.type) | \(.severity) | \(.component | sub(".*src/"; "")) | \(.line // "N/A") | \(.message | gsub("[\r\n]"; " ")) |"' report/sonar-issues.json >> report/issue-body.md || echo "✅ No SonarCloud issues." >> report/issue-body.md

      - name: Upload report (overwrite)
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report
          overwrite: true
          

  ##### ISSUE REPORT #####
  issue-report:
    runs-on: ubuntu-latest
    needs: 
      - static-analysis-reports
      - build-with-coverage
    steps:
      - name: Checkout repository  # ✅ 반드시 추가
        uses: actions/checkout@v3

      - name: Download reports directory
        uses: actions/download-artifact@v4
        with:
          name: report
          path: report
          
      - name: 🔍 Check report directory
        run: |
          echo "현재 report 디렉토리 내용:"
            find report
            
      - name: Create GitHub Issue with Full Static Analysis Results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ $(wc -l < report/issue-body.md) -gt 10 ]; then
            gh issue create \
              --title "🔍 정적 분석 통합 리포트" \
              --body-file report/issue-body.md
          else
            echo "✅ 분석 결과에 등록할 이슈가 없습니다."
          fi
